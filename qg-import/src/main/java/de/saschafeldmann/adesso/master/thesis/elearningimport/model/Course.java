package de.saschafeldmann.adesso.master.thesis.elearningimport.model;

import com.google.common.base.Strings;
import com.google.common.collect.ImmutableCollection;
import com.google.common.collect.ImmutableList;

import java.util.ArrayList;
import java.util.List;

/**
 * Project:        Masterthesis of Sascha Feldmann
 * Creation date:  24.05.2016
 * Author:         Sascha Feldmann (sascha.feldmann@gmx.de)
 * <br /><br />
 * University:
 * Hochschule f√ºr Technik und Wirtschaft, Berlin
 * Fachbereich 4
 * Studiengang Internationale Medieninformatik (Master)
 * <br /><br />
 * Company:
 * adesso AG
 * <br /><br />
 * A course is a teaching unit.
 * In the context of the question generator, a course consists of a collection of e - learning - teaching material (such as PDF) ({@link LearningContent)}
 * and contains an exam at the end. The questions for this exam should be generated by the e-learning application.
 */
public class Course {
    private String title;
    private String viewUrl;
    private Language primaryLanguage;
    private final List<LearningContent> learningContents;

    private Course(CourseBuilder courseBuilder) {
        this.title = courseBuilder.title;
        this.viewUrl = courseBuilder.viewUrl;
        this.primaryLanguage = courseBuilder.language;
        this.learningContents = new ArrayList<LearningContent>();
    }

    /**
     * Gets the courses's title / label.
     * @return String
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title.
     * @param title the title
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Gets the URL to view the course.
     * This could be an URL to a course on moodle for example.
     * @return String
     */
    public String getViewUrl() {
        return viewUrl;
    }

    /**
     * Sets the URL to view the course.
     * This could be an URL to a course on moodle for example.
     * @param viewUrl String
     */
    public void setViewUrl(String viewUrl) {
        this.viewUrl = viewUrl;
    }

    /**
     * Gets the (primary) primaryLanguage of the course.
     * It is necessary to be predefined so that the natural primaryLanguage processing is more effective.
     * @return String
     */
    public Language getPrimaryLanguage() {
        return primaryLanguage;
    }

    /**
     * Sets (primary) primaryLanguage of the course.
     * It is necessary to be predefined so that the natural primaryLanguage processing is more effective.
     * @param primaryLanguage the primaryLanguage
     */
    public void setPrimaryLanguage(Language primaryLanguage) {
        this.primaryLanguage = primaryLanguage;
    }

    /**
     * Get the elearning contents as {@link ImmutableCollection}.
     * @return the immutable collection of learning content objects.
     */
    public ImmutableList<LearningContent> getLearningContents() {
        return ImmutableList.copyOf(learningContents);
    }

    /**
     * Adds / replaces (if learning content with this title already exists)
     * @param learningContent {@link LearningContent} the content to be added
     */
    public void addOrReplaceLearningContent(final LearningContent learningContent) {
        LearningContent learningContentCopy = LearningContent.copyOf(learningContent);

        if (learningContents.contains(learningContentCopy)) {
            removeLearningContent(learningContentCopy);
        }

        learningContents.add(learningContentCopy);
    }

    /**
     * Removes the given learning content if it exists.
     * @param learningContent the learning content
     */
    public void removeLearningContent(final LearningContent learningContent) {
        if (learningContents.contains(learningContent)) {
            learningContents.remove(learningContent);
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Course course = (Course) o;

        if (!title.equals(course.title)) return false;
        if (!viewUrl.equals(course.viewUrl)) return false;
        return primaryLanguage == course.primaryLanguage;

    }

    @Override
    public int hashCode() {
        int result = title.hashCode();
        result = 31 * result + viewUrl.hashCode();
        result = 31 * result + primaryLanguage.hashCode();
        return result;
    }

    @Override
    public String toString() {
        return "Course{" + "title='" + title + '\'' +
                ", viewUrl='" + viewUrl + '\'' +
                ", primaryLanguage=" + primaryLanguage +
                '}';
    }

    public static class CourseBuilder {
        private String title;
        private String viewUrl;
        private Language language;

        /**
         * Assigns a title (label) to the course.
         * @param title String
         * @return this
         * @throws NullPointerException if the argument is null
         */
        public CourseBuilder withTitle(final String title) {
            if (Strings.isNullOrEmpty(title) || 0 == title.trim().length()) {
                throw new NullPointerException("The value for the parameter title must not be null!");
            }

            this.title = title;

            return this;
        }

        /**
         * Assigns a title (label) to the course.
         * @param viewUrl String
         * @return this
         * @throws NullPointerException if the argument is null
         */
        public CourseBuilder withViewUrl(final String viewUrl) {
            if (Strings.isNullOrEmpty(viewUrl) || 0 == viewUrl.trim().length()) {
                throw new NullPointerException("The value for the parameter viewUrl must not be null!");
            }

            this.viewUrl = viewUrl;

            return this;
        }

        /**
         * Assigns a title (label) to the course.
         * @param language {@link Language}
         * @return this
         * @throws NullPointerException if the argument is null
         */
        public CourseBuilder withLanguage(final Language language) {
            if (null == language) {
                throw new NullPointerException("The value for the parameter primaryLanguage must not be null!");
            }

            this.language = language;

            return this;
        }

        /**
         * 
         * @return the built course instance
         */
        public Course build() {
            return new Course(this);
        }
    }
}
